// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Mini.jflex

///////////////////////////////////////////////////////////////////////////////
// Código do usuário (antes da declaração da classe)
///////////////////////////////////////////////////////////////////////////////
package src;
// import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\0\1\3\2\0"+
    "\1\4\2\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\0\1\13\12\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\0\32\23\1\24\1\25\1\26\1\0\1\27"+
    "\1\0\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\23\1\41\1\42\1\43\1\44\1\45"+
    "\1\23\1\46\1\47\1\50\1\51\1\52\1\53\3\23"+
    "\1\0\1\54\10\0\1\2\32\0\1\1\11\0\1\55"+
    "\12\0\1\55\4\0\1\55\5\0\27\55\1\0\37\55"+
    "\1\0\u01ca\55\4\0\14\55\16\0\5\55\7\0\1\55"+
    "\1\0\1\55\21\0\165\55\1\0\2\55\2\0\4\55"+
    "\1\0\1\55\6\0\1\55\1\0\3\55\1\0\1\55"+
    "\1\0\24\55\1\0\123\55\1\0\213\55\1\0\255\55"+
    "\1\0\46\55\2\0\1\55\6\0\51\55\10\0\55\55"+
    "\1\0\1\55\1\0\2\55\1\0\2\55\1\0\1\55"+
    "\10\0\33\55\4\0\4\55\35\0\13\55\5\0\100\55"+
    "\12\56\4\0\146\55\1\0\10\55\2\0\12\55\1\0"+
    "\6\55\12\56\3\55\2\0\1\55\20\0\73\55\2\0"+
    "\145\55\16\0\12\56\54\55\4\0\1\55\2\0\1\55"+
    "\2\0\56\55\22\0\34\55\4\0\13\55\65\0\25\55"+
    "\1\0\10\55\25\0\17\55\1\0\201\55\2\0\12\56"+
    "\1\0\23\55\1\0\10\55\2\0\2\55\2\0\26\55"+
    "\1\0\7\55\1\0\1\55\3\0\4\55\2\0\11\55"+
    "\2\0\2\55\2\0\4\55\10\0\1\55\4\0\2\55"+
    "\1\0\5\55\2\0\12\56\2\55\12\0\1\55\1\0"+
    "\1\55\2\0\3\55\1\0\6\55\4\0\2\55\2\0"+
    "\26\55\1\0\7\55\1\0\2\55\1\0\2\55\1\0"+
    "\2\55\2\0\1\55\1\0\5\55\4\0\2\55\2\0"+
    "\3\55\3\0\1\55\7\0\4\55\1\0\1\55\7\0"+
    "\12\56\6\55\13\0\3\55\1\0\11\55\1\0\3\55"+
    "\1\0\26\55\1\0\7\55\1\0\2\55\1\0\5\55"+
    "\2\0\12\55\1\0\3\55\1\0\3\55\2\0\1\55"+
    "\17\0\4\55\2\0\12\56\11\0\7\55\1\0\3\55"+
    "\1\0\10\55\2\0\2\55\2\0\26\55\1\0\7\55"+
    "\1\0\2\55\1\0\5\55\2\0\11\55\2\0\2\55"+
    "\2\0\3\55\10\0\2\55\4\0\2\55\1\0\5\55"+
    "\2\0\12\56\1\0\1\55\20\0\2\55\1\0\6\55"+
    "\3\0\3\55\1\0\4\55\3\0\2\55\1\0\1\55"+
    "\1\0\2\55\3\0\2\55\3\0\3\55\3\0\14\55"+
    "\4\0\5\55\3\0\3\55\1\0\4\55\2\0\1\55"+
    "\6\0\1\55\16\0\12\56\20\0\15\55\1\0\3\55"+
    "\1\0\27\55\1\0\20\55\3\0\10\55\1\0\3\55"+
    "\1\0\4\55\7\0\2\55\1\0\3\55\5\0\4\55"+
    "\2\0\12\56\20\0\4\55\1\0\10\55\1\0\3\55"+
    "\1\0\27\55\1\0\12\55\1\0\5\55\2\0\11\55"+
    "\1\0\3\55\1\0\4\55\7\0\2\55\7\0\1\55"+
    "\1\0\4\55\2\0\12\56\1\0\2\55\15\0\4\55"+
    "\1\0\10\55\1\0\3\55\1\0\63\55\1\0\3\55"+
    "\1\0\5\55\5\0\4\55\7\0\5\55\2\0\12\56"+
    "\12\0\6\55\2\0\2\55\1\0\22\55\3\0\30\55"+
    "\1\0\11\55\1\0\1\55\2\0\7\55\3\0\1\55"+
    "\4\0\6\55\1\0\1\55\1\0\10\55\6\0\12\56"+
    "\2\0\2\55\15\0\72\55\5\0\17\55\1\0\12\56"+
    "\47\0\2\55\1\0\1\55\1\0\5\55\1\0\30\55"+
    "\1\0\1\55\1\0\27\55\2\0\5\55\1\0\1\55"+
    "\1\0\6\55\2\0\12\56\2\0\4\55\40\0\1\55"+
    "\27\0\2\55\6\0\12\56\13\0\1\55\1\0\1\55"+
    "\1\0\1\55\4\0\12\55\1\0\44\55\4\0\24\55"+
    "\1\0\22\55\1\0\44\55\11\0\1\55\71\0\100\55"+
    "\12\56\6\0\100\55\12\56\4\55\2\0\46\55\1\0"+
    "\1\55\5\0\1\55\2\0\53\55\1\0\115\55\1\0"+
    "\4\55\2\0\7\55\1\0\1\55\1\0\4\55\2\0"+
    "\51\55\1\0\4\55\2\0\41\55\1\0\4\55\2\0"+
    "\7\55\1\0\1\55\1\0\4\55\2\0\17\55\1\0"+
    "\71\55\1\0\4\55\2\0\103\55\2\0\3\55\40\0"+
    "\20\55\20\0\126\55\2\0\6\55\3\0\u016c\55\2\0"+
    "\21\55\1\1\32\55\5\0\113\55\3\0\13\55\7\0"+
    "\15\55\1\0\7\55\13\0\25\55\13\0\24\55\14\0"+
    "\15\55\1\0\3\55\1\0\2\55\14\0\124\55\3\0"+
    "\1\55\4\0\2\55\2\0\12\56\41\0\3\55\2\0"+
    "\12\56\6\0\131\55\7\0\53\55\5\0\106\55\12\0"+
    "\37\55\1\0\14\55\4\0\14\55\12\0\12\56\36\55"+
    "\2\0\5\55\13\0\54\55\4\0\32\55\6\0\12\56"+
    "\46\0\34\55\4\0\77\55\1\0\35\55\2\0\1\55"+
    "\12\56\6\0\12\56\15\0\1\55\10\0\17\55\101\0"+
    "\114\55\4\0\12\56\21\0\11\55\14\0\60\55\12\56"+
    "\72\55\14\0\70\55\10\0\12\56\3\0\3\55\12\56"+
    "\44\55\2\0\11\55\7\0\53\55\2\0\3\55\20\0"+
    "\3\55\1\0\47\55\5\0\372\55\1\0\33\55\2\0"+
    "\6\55\2\0\46\55\2\0\6\55\2\0\10\55\1\0"+
    "\1\55\1\0\1\55\1\0\1\55\1\0\37\55\2\0"+
    "\65\55\1\0\7\55\1\0\1\55\3\0\3\55\1\0"+
    "\7\55\3\0\4\55\2\0\6\55\4\0\15\55\5\0"+
    "\3\55\1\0\7\55\3\0\13\1\35\0\2\2\5\0"+
    "\1\1\17\0\2\55\23\0\1\55\12\0\1\1\21\0"+
    "\1\55\15\0\1\55\20\0\15\55\63\0\41\55\21\0"+
    "\1\55\4\0\1\55\2\0\12\55\1\0\1\55\3\0"+
    "\5\55\6\0\1\55\1\0\1\55\1\0\1\55\1\0"+
    "\4\55\1\0\13\55\2\0\4\55\5\0\5\55\4\0"+
    "\1\55\21\0\51\55\u022d\0\64\55\26\0\57\55\1\0"+
    "\57\55\1\0\205\55\6\0\11\55\14\0\46\55\1\0"+
    "\1\55\5\0\1\55\2\0\70\55\7\0\1\55\17\0"+
    "\30\55\11\0\7\55\1\0\7\55\1\0\7\55\1\0"+
    "\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0"+
    "\7\55\1\0\40\55\57\0\1\55\320\0\1\1\4\0"+
    "\3\55\31\0\17\55\1\0\5\55\2\0\5\55\4\0"+
    "\126\55\2\0\2\55\2\0\3\55\1\0\132\55\1\0"+
    "\4\55\5\0\53\55\1\0\136\55\21\0\33\55\65\0"+
    "\306\55\112\0\360\55\20\0\215\55\103\0\56\55\2\0"+
    "\15\55\3\0\20\55\12\56\2\55\24\0\63\55\1\0"+
    "\12\55\1\0\163\55\45\0\11\55\2\0\147\55\2\0"+
    "\65\55\2\0\5\55\60\0\61\55\30\0\64\55\14\0"+
    "\106\55\12\0\12\56\6\0\30\55\3\0\1\55\1\0"+
    "\3\55\12\56\44\55\2\0\44\55\14\0\35\55\3\0"+
    "\101\55\16\0\1\55\12\56\6\0\20\55\12\56\5\55"+
    "\1\0\67\55\11\0\16\55\2\0\12\56\6\0\27\55"+
    "\3\0\111\55\30\0\3\55\2\0\20\55\2\0\5\55"+
    "\12\0\6\55\2\0\6\55\2\0\6\55\11\0\7\55"+
    "\1\0\7\55\1\0\53\55\1\0\14\55\10\0\173\55"+
    "\1\0\2\55\2\0\12\56\6\0\244\55\14\0\27\55"+
    "\4\0\61\55\4\0\u0100\57\156\55\2\0\152\55\46\0"+
    "\7\55\14\0\5\55\5\0\14\55\1\0\15\55\1\0"+
    "\5\55\1\0\1\55\1\0\2\55\1\0\2\55\1\0"+
    "\154\55\41\0\153\55\22\0\100\55\2\0\66\55\50\0"+
    "\14\55\4\0\20\55\20\0\20\55\3\0\2\55\30\0"+
    "\3\55\40\0\5\55\1\0\207\55\23\0\12\56\7\0"+
    "\32\55\4\0\1\55\1\0\32\55\13\0\131\55\3\0"+
    "\6\55\2\0\6\55\2\0\6\55\2\0\3\55\43\0"+
    "\14\55\1\0\32\55\1\0\23\55\1\0\2\55\1\0"+
    "\17\55\2\0\16\55\42\0\173\55\105\0\65\55\210\0"+
    "\1\55\202\0\35\55\3\0\61\55\17\0\1\55\37\0"+
    "\40\55\15\0\36\55\5\0\53\55\5\0\36\55\2\0"+
    "\44\55\4\0\10\55\1\0\5\55\52\0\236\55\2\0"+
    "\12\56\6\0\44\55\4\0\44\55\4\0\50\55\10\0"+
    "\64\55\234\0\67\55\11\0\26\55\12\0\10\55\230\0"+
    "\6\55\2\0\1\55\1\0\54\55\1\0\2\55\3\0"+
    "\1\55\2\0\27\55\12\0\27\55\11\0\37\55\101\0"+
    "\23\55\1\0\2\55\12\0\26\55\12\0\32\55\106\0"+
    "\70\55\6\0\2\55\100\0\4\55\1\0\2\55\5\0"+
    "\10\55\1\0\3\55\1\0\35\55\2\0\3\55\4\0"+
    "\1\55\40\0\35\55\3\0\35\55\43\0\10\55\1\0"+
    "\36\55\31\0\66\55\12\0\26\55\12\0\23\55\15\0"+
    "\22\55\156\0\111\55\67\0\63\55\15\0\63\55\15\0"+
    "\50\55\10\0\12\56\306\0\35\55\12\0\1\55\10\0"+
    "\41\55\217\0\27\55\11\0\107\55\37\0\12\56\17\0"+
    "\74\55\25\0\31\55\7\0\12\56\6\0\65\55\1\0"+
    "\12\56\4\0\3\55\11\0\44\55\2\0\1\55\11\0"+
    "\105\55\4\0\4\55\3\0\12\56\1\55\1\0\1\55"+
    "\43\0\22\55\1\0\45\55\6\0\1\55\101\0\7\55"+
    "\1\0\1\55\1\0\4\55\1\0\17\55\1\0\12\55"+
    "\7\0\73\55\5\0\12\56\6\0\4\55\1\0\10\55"+
    "\2\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55"+
    "\1\0\5\55\1\0\12\55\2\0\2\55\2\0\3\55"+
    "\2\0\1\55\6\0\1\55\5\0\7\55\2\0\7\55"+
    "\3\0\5\55\213\0\113\55\5\0\12\56\4\0\2\55"+
    "\40\0\106\55\1\0\1\55\10\0\12\56\246\0\66\55"+
    "\2\0\11\55\27\0\6\55\42\0\101\55\3\0\1\55"+
    "\13\0\12\56\46\0\71\55\7\0\12\56\66\0\33\55"+
    "\2\0\17\55\4\0\12\56\306\0\73\55\145\0\100\55"+
    "\12\56\25\0\1\55\240\0\10\55\2\0\56\55\2\0"+
    "\10\55\1\0\2\55\33\0\77\55\10\0\1\55\10\0"+
    "\112\55\3\0\1\55\42\0\71\55\7\0\11\55\1\0"+
    "\55\55\1\0\11\55\17\0\12\56\30\0\36\55\2\0"+
    "\26\55\1\0\16\55\111\0\7\55\1\0\2\55\1\0"+
    "\54\55\3\0\1\55\1\0\2\55\1\0\11\55\10\0"+
    "\12\56\6\0\6\55\1\0\2\55\1\0\45\55\1\0"+
    "\2\55\1\0\6\55\7\0\12\56\u0136\0\27\55\11\0"+
    "\232\55\146\0\157\55\21\0\304\55\274\0\57\55\321\0"+
    "\107\55\271\0\71\55\7\0\37\55\1\0\12\56\146\0"+
    "\36\55\2\0\5\55\13\0\67\55\11\0\4\55\14\0"+
    "\12\56\11\0\25\55\5\0\23\55\260\0\100\55\200\0"+
    "\113\55\4\0\71\55\7\0\21\55\100\0\2\55\1\0"+
    "\1\55\34\0\370\55\10\0\363\55\15\0\37\55\61\0"+
    "\3\55\21\0\4\55\10\0\u018c\55\4\0\153\55\5\0"+
    "\15\55\3\0\11\55\7\0\12\55\3\0\2\55\306\0"+
    "\5\55\3\0\6\55\10\0\10\55\2\0\7\55\36\0"+
    "\4\55\224\0\3\55\273\0\125\55\1\0\107\55\1\0"+
    "\2\55\2\0\1\55\2\0\2\55\2\0\4\55\1\0"+
    "\14\55\1\0\1\55\1\0\7\55\1\0\101\55\1\0"+
    "\4\55\2\0\10\55\1\0\7\55\1\0\34\55\1\0"+
    "\4\55\1\0\5\55\1\0\1\55\3\0\7\55\1\0"+
    "\u0154\55\2\0\31\55\1\0\31\55\1\0\37\55\1\0"+
    "\31\55\1\0\37\55\1\0\31\55\1\0\37\55\1\0"+
    "\31\55\1\0\37\55\1\0\31\55\1\0\10\55\2\0"+
    "\62\56\67\55\4\0\62\55\10\0\1\55\16\0\1\55"+
    "\26\0\5\55\1\0\17\55\120\0\7\55\1\0\21\55"+
    "\2\0\7\55\1\0\2\55\1\0\5\55\325\0\55\55"+
    "\3\0\16\55\2\0\12\56\4\0\1\55\u0171\0\60\55"+
    "\12\56\6\0\305\55\13\0\7\55\51\0\114\55\4\0"+
    "\12\56\246\0\4\55\1\0\33\55\1\0\2\55\1\0"+
    "\1\55\2\0\1\55\1\0\12\55\1\0\4\55\1\0"+
    "\1\55\1\0\1\55\6\0\1\55\4\0\1\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\2\55\1\0"+
    "\1\55\2\0\1\55\1\0\1\55\1\0\1\55\1\0"+
    "\1\55\1\0\1\55\1\0\2\55\1\0\1\55\2\0"+
    "\4\55\1\0\7\55\1\0\4\55\1\0\4\55\1\0"+
    "\1\55\1\0\12\55\1\0\21\55\5\0\3\55\1\0"+
    "\5\55\1\0\21\55\164\0\32\55\6\0\32\55\6\0"+
    "\32\55\166\0\327\55\51\0\65\55\13\0\336\55\2\0"+
    "\u0182\55\16\0\u0131\55\37\0\36\55\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\15\23\1\26"+
    "\1\0\1\27\1\0\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\5\23\1\43"+
    "\3\23\1\44\4\23\1\45\7\23\1\46\1\47\1\50"+
    "\2\23\1\51\1\23\1\52\2\23\1\53\1\54\12\23"+
    "\1\55\2\23\1\56\1\23\1\57\1\60\1\61\1\62"+
    "\2\23\1\63\1\23\1\64\2\23\1\65\1\66\1\0"+
    "\6\23\1\0\2\23\1\67\1\70\1\71\1\0\1\72"+
    "\1\23\2\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\60\0\140\0\220\0\60\0\60\0\300"+
    "\0\360\0\60\0\u0120\0\u0150\0\u0180\0\u01b0\0\60\0\u01e0"+
    "\0\60\0\u0210\0\60\0\u0240\0\60\0\60\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u0240\0\140\0\60\0\u04e0\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0510\0\60\0\60"+
    "\0\60\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0240"+
    "\0\u0660\0\u0690\0\u06c0\0\u0240\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u0240\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0"+
    "\0\60\0\60\0\u0240\0\u0900\0\u0930\0\u0240\0\u0960\0\u0240"+
    "\0\u0990\0\u09c0\0\u0240\0\u0240\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0240\0\u0bd0"+
    "\0\u0c00\0\u0240\0\u0c30\0\u0240\0\u0240\0\u0240\0\u0240\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\u0240\0\u0d20\0\u0d50\0\u0240\0\u0240"+
    "\0\u0d80\0\u0cc0\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0"+
    "\0\u0ed0\0\u0f00\0\u0240\0\u0240\0\u0240\0\u0f30\0\u0cc0\0\u0f60"+
    "\0\u0d80\0\u0de0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\2\1\26\1\2\1\27"+
    "\1\30\1\24\1\31\1\32\1\33\2\24\1\34\1\24"+
    "\1\35\1\36\1\37\1\40\1\41\1\24\1\42\2\24"+
    "\1\43\1\44\1\2\1\15\61\0\3\45\1\46\21\45"+
    "\1\47\32\45\2\5\1\0\54\5\10\0\1\50\10\0"+
    "\1\51\57\0\1\52\57\0\1\53\57\0\1\54\53\0"+
    "\1\15\41\0\1\15\21\0\1\55\56\0\1\56\1\57"+
    "\1\60\56\0\1\61\1\62\52\0\1\24\6\0\1\24"+
    "\3\0\26\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\14\24\1\64\11\24\2\63\15\0\1\24\6\0\1\24"+
    "\3\0\5\24\1\65\20\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\5\24\1\66\3\24\1\67\3\24\1\70"+
    "\10\24\2\63\15\0\1\24\6\0\1\24\3\0\12\24"+
    "\1\71\1\24\1\72\11\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\1\24\1\73\24\24\2\63\15\0\1\24"+
    "\6\0\1\24\3\0\6\24\1\74\5\24\1\75\11\24"+
    "\2\63\15\0\1\24\6\0\1\24\3\0\15\24\1\76"+
    "\10\24\2\63\15\0\1\24\6\0\1\24\3\0\15\24"+
    "\1\77\10\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\14\24\1\100\2\24\1\101\6\24\2\63\15\0\1\24"+
    "\6\0\1\24\3\0\17\24\1\102\6\24\2\63\15\0"+
    "\1\24\6\0\1\24\3\0\5\24\1\103\20\24\2\63"+
    "\15\0\1\24\6\0\1\24\3\0\10\24\1\104\6\24"+
    "\1\105\4\24\1\106\1\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\10\24\1\107\6\24\1\110\6\24\2\63"+
    "\1\0\2\45\1\0\54\45\20\0\1\111\61\0\1\112"+
    "\52\0\1\63\6\0\1\63\4\0\24\63\1\0\2\63"+
    "\15\0\1\24\6\0\1\24\3\0\4\24\1\113\21\24"+
    "\2\63\15\0\1\24\6\0\1\24\3\0\7\24\1\114"+
    "\16\24\2\63\15\0\1\24\6\0\1\24\3\0\3\24"+
    "\1\115\22\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\23\24\1\116\2\24\2\63\15\0\1\24\6\0\1\24"+
    "\3\0\20\24\1\117\5\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\4\24\1\120\21\24\2\63\15\0\1\24"+
    "\6\0\1\24\3\0\12\24\1\121\13\24\2\63\15\0"+
    "\1\24\6\0\1\24\3\0\21\24\1\122\4\24\2\63"+
    "\15\0\1\24\6\0\1\24\3\0\4\24\1\123\21\24"+
    "\2\63\15\0\1\24\6\0\1\24\3\0\21\24\1\124"+
    "\4\24\2\63\15\0\1\24\6\0\1\24\3\0\5\24"+
    "\1\125\20\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\15\24\1\126\10\24\2\63\15\0\1\24\6\0\1\24"+
    "\3\0\1\24\1\127\24\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\5\24\1\130\20\24\2\63\15\0\1\24"+
    "\6\0\1\24\3\0\22\24\1\131\3\24\2\63\15\0"+
    "\1\24\6\0\1\24\3\0\15\24\1\132\10\24\2\63"+
    "\15\0\1\24\6\0\1\24\3\0\11\24\1\133\14\24"+
    "\2\63\15\0\1\24\6\0\1\24\3\0\11\24\1\134"+
    "\14\24\2\63\15\0\1\24\6\0\1\24\3\0\11\24"+
    "\1\135\14\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\12\24\1\136\13\24\2\63\15\0\1\24\6\0\1\24"+
    "\3\0\5\24\1\137\20\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\20\24\1\140\5\24\2\63\15\0\1\24"+
    "\6\0\1\24\3\0\5\24\1\141\20\24\2\63\15\0"+
    "\1\24\6\0\1\24\3\0\20\24\1\142\5\24\2\63"+
    "\15\0\1\24\6\0\1\24\3\0\7\24\1\143\16\24"+
    "\2\63\15\0\1\24\6\0\1\24\3\0\4\24\1\144"+
    "\21\24\2\63\15\0\1\24\6\0\1\24\3\0\14\24"+
    "\1\145\11\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\5\24\1\146\20\24\2\63\15\0\1\24\6\0\1\24"+
    "\3\0\20\24\1\147\5\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\12\24\1\150\13\24\2\63\15\0\1\24"+
    "\6\0\1\24\3\0\21\24\1\151\4\24\2\63\15\0"+
    "\1\24\6\0\1\24\3\0\14\24\1\152\11\24\2\63"+
    "\15\0\1\24\6\0\1\24\3\0\1\24\1\153\24\24"+
    "\2\63\15\0\1\24\6\0\1\24\3\0\5\24\1\154"+
    "\20\24\2\63\15\0\1\24\6\0\1\24\3\0\7\24"+
    "\1\155\16\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\17\24\1\156\6\24\2\63\15\0\1\24\6\0\1\24"+
    "\3\0\5\24\1\157\20\24\2\63\15\0\1\24\6\0"+
    "\1\24\3\0\5\24\1\160\20\24\2\63\1\0\2\161"+
    "\1\0\11\161\1\162\6\161\1\162\3\161\5\162\1\163"+
    "\20\162\2\164\15\0\1\24\6\0\1\24\3\0\17\24"+
    "\1\165\6\24\2\63\15\0\1\24\6\0\1\24\3\0"+
    "\5\24\1\166\20\24\2\63\15\0\1\24\6\0\1\24"+
    "\3\0\1\24\1\167\24\24\2\63\1\0\2\161\1\0"+
    "\31\161\1\170\22\161\1\0\2\161\1\0\11\161\1\162"+
    "\6\161\1\162\3\161\5\162\1\163\6\162\1\171\11\162"+
    "\2\164\1\0\2\161\1\0\11\161\1\164\6\161\1\164"+
    "\4\161\4\164\1\172\17\164\1\161\2\164\15\0\1\24"+
    "\6\0\1\24\3\0\5\24\1\173\20\24\2\63\15\0"+
    "\1\24\6\0\1\24\3\0\17\24\1\174\6\24\2\63"+
    "\15\0\1\24\6\0\1\24\3\0\13\24\1\175\12\24"+
    "\2\63\1\0\2\161\1\0\31\161\1\170\6\161\1\176"+
    "\13\161\1\0\2\161\1\0\11\161\1\162\6\161\1\162"+
    "\3\161\4\162\1\177\1\163\20\162\2\164\1\0\2\161"+
    "\1\0\11\161\1\164\6\161\1\164\4\161\4\164\1\172"+
    "\6\164\1\200\10\164\1\161\2\164\1\0\2\161\1\0"+
    "\30\161\1\201\1\170\22\161\1\0\2\161\1\0\11\161"+
    "\1\164\6\161\1\164\4\161\3\164\1\202\1\172\17\164"+
    "\1\161\2\164\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3984];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\2\11\2\1\1\11\4\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\16\1\1\0"+
    "\1\11\1\0\6\11\1\1\3\11\27\1\2\11\46\1"+
    "\1\0\6\1\1\0\5\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
// Creates a token for each new one found
private MiniToken createToken(String name, String lexeme) {
    return new MiniToken( name, lexeme, yyline, yycolumn);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiniToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + yyline + ", coluna " + yycolumn);
            }
            // fall through
          case 59: break;
          case 2:
            { return createToken("Space", "\\s|\\n");
            }
            // fall through
          case 60: break;
          case 3:
            { return createToken("Quotes", yytext());
            }
            // fall through
          case 61: break;
          case 4:
            { return createToken("Comment", yytext());
            }
            // fall through
          case 62: break;
          case 5:
            { return createToken("LeftParenthesis", yytext());
            }
            // fall through
          case 63: break;
          case 6:
            { return createToken("RightParenthesis", yytext());
            }
            // fall through
          case 64: break;
          case 7:
            { return createToken("Asterisk", yytext());
            }
            // fall through
          case 65: break;
          case 8:
            { return createToken("Plus", yytext());
            }
            // fall through
          case 66: break;
          case 9:
            { return createToken("Comma", yytext());
            }
            // fall through
          case 67: break;
          case 10:
            { return createToken("Minus", yytext());
            }
            // fall through
          case 68: break;
          case 11:
            { return createToken("Slash", yytext());
            }
            // fall through
          case 69: break;
          case 12:
            { return createToken("Number", yytext());
            }
            // fall through
          case 70: break;
          case 13:
            { return createToken("TernaryElse", yytext());
            }
            // fall through
          case 71: break;
          case 14:
            { return createToken("SemiColon", yytext());
            }
            // fall through
          case 72: break;
          case 15:
            { return createToken("LessThan", yytext());
            }
            // fall through
          case 73: break;
          case 16:
            { return createToken("Equal", yytext());
            }
            // fall through
          case 74: break;
          case 17:
            { return createToken("GreaterThan", yytext());
            }
            // fall through
          case 75: break;
          case 18:
            { return createToken("TernaryIf", yytext());
            }
            // fall through
          case 76: break;
          case 19:
            { return createToken("Variable", yytext());
            }
            // fall through
          case 77: break;
          case 20:
            { return createToken("LeftBracket", yytext());
            }
            // fall through
          case 78: break;
          case 21:
            { return createToken("RightBracket", yytext());
            }
            // fall through
          case 79: break;
          case 22:
            { return createToken("ExclusiveOr", yytext());
            }
            // fall through
          case 80: break;
          case 23:
            { return createToken("Literal", yytext());
            }
            // fall through
          case 81: break;
          case 24:
            { return createToken("AsteriskAsterisk", yytext());
            }
            // fall through
          case 82: break;
          case 25:
            { return createToken("MultiplyAndSave", yytext());
            }
            // fall through
          case 83: break;
          case 26:
            { return createToken("SumAndSave", yytext());
            }
            // fall through
          case 84: break;
          case 27:
            { return createToken("SubtractAndSave", yytext());
            }
            // fall through
          case 85: break;
          case 28:
            { return createToken("DivideAndSave", yytext());
            }
            // fall through
          case 86: break;
          case 29:
            { return createToken("ColonEqual", yytext());
            }
            // fall through
          case 87: break;
          case 30:
            { return createToken("ShiftLeft", yytext());
            }
            // fall through
          case 88: break;
          case 31:
            { return createToken("LessThanEqual", yytext());
            }
            // fall through
          case 89: break;
          case 32:
            { return createToken("LessThanGreaterThan", yytext());
            }
            // fall through
          case 90: break;
          case 33:
            { return createToken("GreaterThanEqual", yytext());
            }
            // fall through
          case 91: break;
          case 34:
            { return createToken("ShiftRight", yytext());
            }
            // fall through
          case 92: break;
          case 35:
            { return createToken("Do", yytext());
            }
            // fall through
          case 93: break;
          case 36:
            { return createToken("If", yytext());
            }
            // fall through
          case 94: break;
          case 37:
            { return createToken("Or", yytext());
            }
            // fall through
          case 95: break;
          case 38:
            { return createToken("ShiftRigthMost", yytext());
            }
            // fall through
          case 96: break;
          case 39:
            { return createToken("ShiftLeftMost", yytext());
            }
            // fall through
          case 97: break;
          case 40:
            { return createToken("And", yytext());
            }
            // fall through
          case 98: break;
          case 41:
            { return createToken("Div", yytext());
            }
            // fall through
          case 99: break;
          case 42:
            { return createToken("End", yytext());
            }
            // fall through
          case 100: break;
          case 43:
            { return createToken("Mod", yytext());
            }
            // fall through
          case 101: break;
          case 44:
            { return createToken("Not", yytext());
            }
            // fall through
          case 102: break;
          case 45:
            { return createToken("Else", yytext());
            }
            // fall through
          case 103: break;
          case 46:
            { return createToken("OneComplement", yytext());
            }
            // fall through
          case 104: break;
          case 47:
            { return createToken("Read", yytext());
            }
            // fall through
          case 105: break;
          case 48:
            { return createToken("THEN", yytext());
            }
            // fall through
          case 106: break;
          case 49:
            { return createToken("True", yytext());
            }
            // fall through
          case 107: break;
          case 50:
            { return createToken("TwoComplement", yytext());
            }
            // fall through
          case 108: break;
          case 51:
            { return createToken("Begin", yytext());
            }
            // fall through
          case 109: break;
          case 52:
            { return createToken("False", yytext());
            }
            // fall through
          case 110: break;
          case 53:
            { return createToken("WHILE", yytext());
            }
            // fall through
          case 111: break;
          case 54:
            { return createToken("Write", yytext());
            }
            // fall through
          case 112: break;
          case 55:
            { return createToken("Declare", yytext());
            }
            // fall through
          case 113: break;
          case 56:
            { return createToken("INT", yytext());
            }
            // fall through
          case 114: break;
          case 57:
            { return createToken("Program", yytext());
            }
            // fall through
          case 115: break;
          case 58:
            { return createToken("Body", yytext());
            }
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
